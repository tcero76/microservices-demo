/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package cl.sugarfever.kafka.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Servicio extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 7629419547476393941L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Servicio\",\"namespace\":\"cl.sugarfever.kafka.avro\",\"fields\":[{\"name\":\"idservicio\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\",\"logicalType\":\"UUID\"}},{\"name\":\"nombre\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"default\":\"\"},{\"name\":\"adicional\",\"type\":\"boolean\",\"default\":false}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Servicio> ENCODER =
      new BinaryMessageEncoder<Servicio>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Servicio> DECODER =
      new BinaryMessageDecoder<Servicio>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Servicio> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Servicio> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Servicio> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Servicio>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Servicio to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Servicio from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Servicio instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Servicio fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.String idservicio;
   private java.lang.String nombre;
   private boolean adicional;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Servicio() {}

  /**
   * All-args constructor.
   * @param idservicio The new value for idservicio
   * @param nombre The new value for nombre
   * @param adicional The new value for adicional
   */
  public Servicio(java.lang.String idservicio, java.lang.String nombre, java.lang.Boolean adicional) {
    this.idservicio = idservicio;
    this.nombre = nombre;
    this.adicional = adicional;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return idservicio;
    case 1: return nombre;
    case 2: return adicional;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: idservicio = value$ != null ? value$.toString() : null; break;
    case 1: nombre = value$ != null ? value$.toString() : null; break;
    case 2: adicional = (java.lang.Boolean)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'idservicio' field.
   * @return The value of the 'idservicio' field.
   */
  public java.lang.String getIdservicio() {
    return idservicio;
  }


  /**
   * Sets the value of the 'idservicio' field.
   * @param value the value to set.
   */
  public void setIdservicio(java.lang.String value) {
    this.idservicio = value;
  }

  /**
   * Gets the value of the 'nombre' field.
   * @return The value of the 'nombre' field.
   */
  public java.lang.String getNombre() {
    return nombre;
  }


  /**
   * Sets the value of the 'nombre' field.
   * @param value the value to set.
   */
  public void setNombre(java.lang.String value) {
    this.nombre = value;
  }

  /**
   * Gets the value of the 'adicional' field.
   * @return The value of the 'adicional' field.
   */
  public boolean getAdicional() {
    return adicional;
  }


  /**
   * Sets the value of the 'adicional' field.
   * @param value the value to set.
   */
  public void setAdicional(boolean value) {
    this.adicional = value;
  }

  /**
   * Creates a new Servicio RecordBuilder.
   * @return A new Servicio RecordBuilder
   */
  public static cl.sugarfever.kafka.avro.Servicio.Builder newBuilder() {
    return new cl.sugarfever.kafka.avro.Servicio.Builder();
  }

  /**
   * Creates a new Servicio RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Servicio RecordBuilder
   */
  public static cl.sugarfever.kafka.avro.Servicio.Builder newBuilder(cl.sugarfever.kafka.avro.Servicio.Builder other) {
    if (other == null) {
      return new cl.sugarfever.kafka.avro.Servicio.Builder();
    } else {
      return new cl.sugarfever.kafka.avro.Servicio.Builder(other);
    }
  }

  /**
   * Creates a new Servicio RecordBuilder by copying an existing Servicio instance.
   * @param other The existing instance to copy.
   * @return A new Servicio RecordBuilder
   */
  public static cl.sugarfever.kafka.avro.Servicio.Builder newBuilder(cl.sugarfever.kafka.avro.Servicio other) {
    if (other == null) {
      return new cl.sugarfever.kafka.avro.Servicio.Builder();
    } else {
      return new cl.sugarfever.kafka.avro.Servicio.Builder(other);
    }
  }

  /**
   * RecordBuilder for Servicio instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Servicio>
    implements org.apache.avro.data.RecordBuilder<Servicio> {

    private java.lang.String idservicio;
    private java.lang.String nombre;
    private boolean adicional;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(cl.sugarfever.kafka.avro.Servicio.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.idservicio)) {
        this.idservicio = data().deepCopy(fields()[0].schema(), other.idservicio);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.nombre)) {
        this.nombre = data().deepCopy(fields()[1].schema(), other.nombre);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.adicional)) {
        this.adicional = data().deepCopy(fields()[2].schema(), other.adicional);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
    }

    /**
     * Creates a Builder by copying an existing Servicio instance
     * @param other The existing instance to copy.
     */
    private Builder(cl.sugarfever.kafka.avro.Servicio other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.idservicio)) {
        this.idservicio = data().deepCopy(fields()[0].schema(), other.idservicio);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.nombre)) {
        this.nombre = data().deepCopy(fields()[1].schema(), other.nombre);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.adicional)) {
        this.adicional = data().deepCopy(fields()[2].schema(), other.adicional);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'idservicio' field.
      * @return The value.
      */
    public java.lang.String getIdservicio() {
      return idservicio;
    }


    /**
      * Sets the value of the 'idservicio' field.
      * @param value The value of 'idservicio'.
      * @return This builder.
      */
    public cl.sugarfever.kafka.avro.Servicio.Builder setIdservicio(java.lang.String value) {
      validate(fields()[0], value);
      this.idservicio = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'idservicio' field has been set.
      * @return True if the 'idservicio' field has been set, false otherwise.
      */
    public boolean hasIdservicio() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'idservicio' field.
      * @return This builder.
      */
    public cl.sugarfever.kafka.avro.Servicio.Builder clearIdservicio() {
      idservicio = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'nombre' field.
      * @return The value.
      */
    public java.lang.String getNombre() {
      return nombre;
    }


    /**
      * Sets the value of the 'nombre' field.
      * @param value The value of 'nombre'.
      * @return This builder.
      */
    public cl.sugarfever.kafka.avro.Servicio.Builder setNombre(java.lang.String value) {
      validate(fields()[1], value);
      this.nombre = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'nombre' field has been set.
      * @return True if the 'nombre' field has been set, false otherwise.
      */
    public boolean hasNombre() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'nombre' field.
      * @return This builder.
      */
    public cl.sugarfever.kafka.avro.Servicio.Builder clearNombre() {
      nombre = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'adicional' field.
      * @return The value.
      */
    public boolean getAdicional() {
      return adicional;
    }


    /**
      * Sets the value of the 'adicional' field.
      * @param value The value of 'adicional'.
      * @return This builder.
      */
    public cl.sugarfever.kafka.avro.Servicio.Builder setAdicional(boolean value) {
      validate(fields()[2], value);
      this.adicional = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'adicional' field has been set.
      * @return True if the 'adicional' field has been set, false otherwise.
      */
    public boolean hasAdicional() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'adicional' field.
      * @return This builder.
      */
    public cl.sugarfever.kafka.avro.Servicio.Builder clearAdicional() {
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Servicio build() {
      try {
        Servicio record = new Servicio();
        record.idservicio = fieldSetFlags()[0] ? this.idservicio : (java.lang.String) defaultValue(fields()[0]);
        record.nombre = fieldSetFlags()[1] ? this.nombre : (java.lang.String) defaultValue(fields()[1]);
        record.adicional = fieldSetFlags()[2] ? this.adicional : (java.lang.Boolean) defaultValue(fields()[2]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Servicio>
    WRITER$ = (org.apache.avro.io.DatumWriter<Servicio>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Servicio>
    READER$ = (org.apache.avro.io.DatumReader<Servicio>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.idservicio);

    out.writeString(this.nombre);

    out.writeBoolean(this.adicional);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.idservicio = in.readString();

      this.nombre = in.readString();

      this.adicional = in.readBoolean();

    } else {
      for (int i = 0; i < 3; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.idservicio = in.readString();
          break;

        case 1:
          this.nombre = in.readString();
          break;

        case 2:
          this.adicional = in.readBoolean();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










